{"remainingRequest":"/Users/keya/exam-online/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/keya/exam-online/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/keya/exam-online/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/keya/exam-online/src/views/Record.vue?vue&type=template&id=4917ee8b&scoped=true&","dependencies":[{"path":"/Users/keya/exam-online/src/views/Record.vue","mtime":1638003877934},{"path":"/Users/keya/exam-online/node_modules/cache-loader/dist/cjs.js","mtime":1638003876547},{"path":"/Users/keya/exam-online/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1638003877814},{"path":"/Users/keya/exam-online/node_modules/cache-loader/dist/cjs.js","mtime":1638003876547},{"path":"/Users/keya/exam-online/node_modules/vue-loader/lib/index.js","mtime":1638003877813}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}